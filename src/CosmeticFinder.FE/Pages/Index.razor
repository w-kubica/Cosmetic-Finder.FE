@page "/"
@using CosmeticFinder.FE.Gateways
@using CosmeticFinder.FE.Gateways.Requests
@using CosmeticFinder.FE.Gateways.Responses

@layout MainLayout
@inject ICosmeticFinder CosmeticFinderApi

<div class="container">

    <div id="fill_compose">
        <input type="text" name="skladnik" placeholder="Wpisz składnik" @bind="@_searchText">
    </div>

    <div class="category">
        <select class="category" @bind="@SelectedCategoryId">
            <option value="0" selected>Wybierz kategorię</option>
            @if (_categories is not null)
            {
                @foreach (var item in _categories)
                {
                    <option value="@item.Id"> @item.Name </option>
                }
            }
        </select>
    </div>

    <button class="search-btn" role="button" @onclick="e => FindCosmetics()">Szukaj</button >

    <div class="isContain">
        <EditForm Model="_searchOption">
           <InputRadioGroup @bind-Value="SelectedSearchOption" >
               @foreach (var option in _searchOptions)
               {
                   <InputRadio Value="option.IsContain" />
                   @option.Name
               }
           </InputRadioGroup>
       </EditForm>
    </div>	

    <div class="popularne">
        <h4>WYBIERZ Z POPULARNYCH WYSZUKIWAŃ</h4>
    </div>

    <button class="popularne-btn" role="button">Bez silikonów </button >
    <button class="popularne-btn" role="button">Nie dla wegan </button >
    <button class="popularne-btn" role="button">Bez alergenów </button >
    <button class="popularne-btn" role="button">Nie dla kobiet w ciąży </button >
    <button class="popularne-btn" role="button">Kosmetyki naturalne </button >
    <button class="popularne-btn" role="button">Bez substancji zapachowych </button >
</div> 


<ProductList Cosmetics="_cosmetics"></ProductList>
<Sort OnSortChanged="SortChanged"></Sort>
<Pagination TotalPagesQuantity="_totalPages" CurrentPage="_pageNumber" Radius="2" SelectedPage="SelectedPage"></Pagination>


@code {
    private int _totalPages;
    private int _pageNumber = 1;
    private int _totalRecords;

    private string? _searchText = "ascorbic acid";
    readonly SearchOption _searchOption = new();
    bool SelectedSearchOption { get; set; } = true;
    int SelectedCategoryId { get; set; }
    private bool _isLoading;

    private string _sortField = "id";
    private bool _ascending = true;

    private IEnumerable<CategoryResponse>? _categories;
    private IEnumerable<CosmeticResponse>? _cosmetic;
    private CosmeticsResponse? _cosmetics;
    
    public record SearchOption
    {
        public bool IsContain { get; set; }
        public string Name { get; set; }
    }

    readonly List<SearchOption> _searchOptions = new()
    {
        new SearchOption {IsContain = true, Name ="Zawiera"},
        new SearchOption {IsContain = false, Name ="Nie zawiera"}
    };
  
    protected override async Task OnInitializedAsync()
    {
        _categories = await CosmeticFinderApi.GetCategories();
    }

    private async Task SelectedPage(int page)
    {
        _pageNumber = page;
        await FindCosmetics(_pageNumber);
    }

    private async Task SortChanged(string orderBy)
    {
        Console.WriteLine(orderBy);

        if (orderBy == "Nazwa a-z")
        {
            _sortField = "brand";
            _ascending = true;
        }
        else if (orderBy == "Nazwa z-a")
        {
            _sortField = "brand";
            _ascending = false;
        }
        else if (orderBy == "Cena rosnąco")
        {
            _sortField = "price";
            _ascending = true;
        }
        else if (orderBy == "Cena malejąco")
        {
            _sortField = "price";
            _ascending = false;
        }
        else
        {
            _sortField = "price";
            _ascending = false;
        }
        await FindCosmetics(1);
        await SelectedPage(1);
    } 

    async Task FindCosmetics(int page=1, int quantityPerPage = 24)
    {
        if (_searchText is not null && !string.IsNullOrWhiteSpace(_searchText) && SelectedCategoryId != 0)
        {
            var request = new GetCosmeticsRequest
            {
                PageNumber = page,
                PageSize = quantityPerPage,
                Search = _searchText,
                MainCategoryId = SelectedCategoryId,
                SortField = _sortField,
                Ascending = _ascending,
                ShouldContainCompose = SelectedSearchOption
            };
            LoadingOn();
            _cosmetics = await CosmeticFinderApi.GetCosmetic(request);
            _totalPages=_cosmetics.TotalPages;
            _totalRecords = _cosmetics.TotalRecords;
            LoadingOff();
        }
    }

    void LoadingOn()
    {
        _isLoading = true;
    }
    
    void LoadingOff()
    {
        _isLoading = false;
    }
}