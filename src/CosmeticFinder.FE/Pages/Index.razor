@page "/"
@using CosmeticFinder.FE.Gateways
@using CosmeticFinder.FE.Gateways.Requests
@using CosmeticFinder.FE.Gateways.Responses

@layout MainLayout
@inject ICosmeticFinder CosmeticFinderApi
@inject NavigationManager navigationManager

<div class="container">

    <div id="fill_compose">
        <input type="text" name="skladnik" placeholder="Wpisz składnik" @bind="@_searchText">
    </div>

    <div class="category">
        <select class="category" @bind="@SelectedCategoryId">
            <option value="0" selected>Wybierz kategorię</option>
            @if (Categories is not null)
            {
                @foreach (var item in Categories)
                {
             
                    <option value="@item.Id"> @item.Name </option>
                   @* Console.WriteLine($"{item.Id} {item.Name}");*@
                }
            }
         @{ Console.WriteLine(SelectedCategoryId); }
        </select>
    </div>

    <button class="search-btn" role="button" @onclick="FindCosmetics"> Szukaj </button >

    <div class="isContain">
       
       <EditForm Model="_searchOption">
           <InputRadioGroup @bind-Value="SelectedSearchOption" >
               @foreach (var option in searchOptions)
               {
                   <InputRadio Value="option.IsContain"/>
                   @option.Name
                   <br/>
               }
               @{ Console.WriteLine(SelectedSearchOption); }
           </InputRadioGroup>
       </EditForm>

    </div>	

    <div class="popularne">
        <h4>WYBIERZ Z POPULARNYCH WYSZUKIWAŃ</h4>
    </div>
    <button class="popularne-btn" role="button"> Bez silikonów </button >
    <button class="popularne-btn" role="button"> Nie dla wegan </button >
    <button class="popularne-btn" role="button"> Bez alergenów </button >
    <button class="popularne-btn" role="button"> Nie dla kobiet w ciąży </button >
    <button class="popularne-btn" role="button"> Kosmetyki naturalne </button >
    <button class="popularne-btn" role="button"> Bez substancji zapachowych </button >
</div> 

@if (_cosmetic is not null)
{
    @foreach (var item in _cosmetic)
    {
        <Product
            Brand="@item.Brand"
            Caption="@item.Caption"
            Url="@item.NavigateUrl"
        ></Product>
    }
}

<div class="loading">
    @if (_isLoading)
    {
        <h3>Ładowanie...</h3>
    }
</div>


@code {

    private string? _searchText = "ascorbic acid";
    bool SelectedSearchOption = true;
    int SelectedCategoryId { get; set; }
    private bool _isLoading;

    private IEnumerable<CategoryResponse>? Categories;
    private IEnumerable<CosmeticResponse>? _cosmetic;
    
    public record SearchOption ()
    {
        public bool IsContain { get; set; }
        public string Name { get; set; }
    }

    SearchOption _searchOption = new SearchOption(){};

    List<SearchOption> searchOptions = new()
    {
        new SearchOption{IsContain=true, Name= "zawiera"},
        new SearchOption{IsContain=false, Name= "nie zawiera"}
    };
  
    protected override async Task OnInitializedAsync()
    {
        Categories = await CosmeticFinderApi.GetCategories();
    }

    async Task FindCosmetics()
    {
        if (_searchText is not null && !string.IsNullOrWhiteSpace(_searchText) && SelectedCategoryId != 0)
        {
            var request = new GetCosmeticsRequest
            {
                search = _searchText,
                mainCategoryId = SelectedCategoryId,
                sort = true,
                sortByPriceAsc = true,
                shouldContainCompose = SelectedSearchOption
            };
            LoadingOn();
            _cosmetic = await CosmeticFinderApi.GetCosmetic(request);
            LoadingOff();
            //navigationManager.NavigateTo($"/navigatetopage/{_cosmetic}");
        }
    }

    void LoadingOn()
    {
        _isLoading = true;
    }
    
    void LoadingOff()
    {
        _isLoading = false;
    }
}